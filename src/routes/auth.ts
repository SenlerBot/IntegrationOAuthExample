import { Request, Response, Router, NextFunction } from 'express';
import passport from 'passport';
import { SenlerChannel } from 'passport-senler';
import { generatePopupSuccessHTML, generatePopupErrorHTML } from '../utils/html';
import { createSenlerService } from '../services/senler';

const router = Router();

/**
 * –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Senler (–æ–±—ã—á–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç)
 */
router.get('/senler', (req: Request, res: Response, next: NextFunction): void => {
  const groupIdFromUrl = req.query.group_id as string;
  
  if (groupIdFromUrl) {
    // –°—Ç—Ä–æ–∏–º OAuth URL —Å group_id –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é
    const clientId = process.env.SENLER_CLIENT_ID;
    const redirectUri = encodeURIComponent(process.env.SENLER_CALLBACK_URL || `http://localhost:${process.env.PORT || 3000}/auth/senler/callback`);
    const state = generateRandomState();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ callback
    (req as any).session.oauthState = state;
    (req as any).session.tempGroupId = groupIdFromUrl;
    
    const oauthUrl = `https://senler.ru/cabinet/OAuth2authorize?response_type=code&group_id=${groupIdFromUrl}&client_id=${clientId}&redirect_uri=${redirectUri}&state=${state}`;
    
    console.log(`üìå –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ OAuth —Å group_id: ${groupIdFromUrl}`);
    res.redirect(oauthUrl);
    return;
  }
  
  passport.authenticate('senler')(req, res, next);
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ state –¥–ª—è OAuth
 */
function generateRandomState(): string {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ OAuth callback (—Å group_id –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
 */
async function handleDirectOAuthCallback(req: Request, res: Response): Promise<void> {
  const authCode = req.query.code as string;
  const sessionGroupId = (req as any).session?.tempGroupId;
  const sessionIsPopup = (req as any).session?.isPopup || false;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Senler API
    const tokenResponse = await fetch('https://senler.ru/api/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        grant_type: 'authorization_code',
        client_id: process.env.SENLER_CLIENT_ID,
        client_secret: process.env.SENLER_CLIENT_SECRET,
        code: authCode,
        redirect_uri: process.env.SENLER_CALLBACK_URL || `http://localhost:${process.env.PORT || 3000}/auth/senler/callback`
      })
    });
    
    if (!tokenResponse.ok) {
      throw new Error(`HTTP ${tokenResponse.status}: ${tokenResponse.statusText}`);
    }
    
    const tokenData = await tokenResponse.json();
    const accessToken = tokenData.access_token;
    
    if (!accessToken) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token');
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π OAuth –¥–ª—è group_id: ${sessionGroupId}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    delete (req as any).session.tempGroupId;
    delete (req as any).session.oauthState;
    delete (req as any).session.isPopup;
    
    if (sessionIsPopup) {
      // –î–ª—è popup –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å JavaScript
      const successHtml = generatePopupSuccessHTML(accessToken, sessionGroupId);
      res.send(successHtml);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
      (req as any).session.user = {
        accessToken,
        groupId: sessionGroupId,
        profile: {}
      };
      res.redirect('/');
    }
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ OAuth:', error.message);
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    delete (req as any).session.tempGroupId;
    delete (req as any).session.oauthState;
    delete (req as any).session.isPopup;
    
    if (sessionIsPopup) {
      const errorHtml = generatePopupErrorHTML('oauth_token_error', error.message);
      res.send(errorHtml);
    } else {
      res.redirect(`/?error=oauth_token_error&details=${encodeURIComponent(error.message)}`);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è Senler (–æ–±—ã—á–Ω—ã–π –∏ popup)
 */
router.get(
  '/senler/callback',
  (req: Request, res: Response, next: NextFunction): void => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø—Ä—è–º–æ–π OAuth callback (—Å group_id)
    const sessionGroupId = (req as any).session?.tempGroupId;
    const sessionState = (req as any).session?.oauthState;
    const callbackState = req.query.state as string;
    const authCode = req.query.code as string;
    
    if (sessionGroupId && sessionState && sessionState === callbackState && authCode) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π OAuth callback
      handleDirectOAuthCallback(req, res);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ callback
    if (req.query.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ callback:', req.query.error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ popup –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è
      const state = req.query.state as string;
      let isPopup = false;
      
      try {
        if (state) {
          const stateData = JSON.parse(state);
          isPopup = stateData.popup === true;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ state
      }
      
      if (isPopup) {
        // –î–ª—è popup –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –æ—à–∏–±–∫–æ–π
        const errorHtml = generatePopupErrorHTML(
          req.query.error as string,
          req.query.error_description as string
        );
                 res.send(errorHtml);
         return;
       } else {
         // –î–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
        res.redirect(`/?error=senler_error&details=${encodeURIComponent(req.query.error as string)}&description=${encodeURIComponent(req.query.error_description as string || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`);
        return;
       }
    }
    
    next();
  },
  passport.authenticate('senler', {
    failureRedirect: '/auth/senler/error',
    session: false,
  }),
  (req: Request & { user?: any }, res: Response): void => {
    const user = req.user as SenlerChannel;
    const accessToken = user?.accessToken;
    let groupId = user?.groupId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä—è–º–æ–≥–æ OAuth —Å group_id
    const sessionGroupId = (req as any).session?.tempGroupId;
    const sessionState = (req as any).session?.oauthState;
    const sessionIsPopup = (req as any).session?.isPopup;
    const callbackState = req.query.state as string;
    
    let isPopup = false;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ (–ø—Ä—è–º–æ–π OAuth), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (sessionGroupId && sessionState && sessionState === callbackState) {
      groupId = sessionGroupId;
      isPopup = sessionIsPopup || false;
      console.log(`üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º group_id –∏–∑ –ø—Ä—è–º–æ–≥–æ OAuth: ${groupId}`);
      
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      delete (req as any).session.tempGroupId;
      delete (req as any).session.oauthState;
      delete (req as any).session.isPopup;
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å state –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
      try {
        if (callbackState) {
          const stateData = JSON.parse(callbackState);
          isPopup = stateData.popup === true;
          if (stateData.groupId) {
            groupId = stateData.groupId;
            console.log(`üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º group_id –∏–∑ state: ${groupId}`);
          }
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ state
      }
    }
    
    if (!accessToken) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
             if (isPopup) {
         const errorHtml = generatePopupErrorHTML('no_token');
         res.send(errorHtml);
         return;
       } else {
        res.redirect('/?error=no_token');
        return;
       }
    }
    
    if (!groupId) {
      console.error('‚ùå Group ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
             if (isPopup) {
         const errorHtml = generatePopupErrorHTML('no_group_id');
         res.send(errorHtml);
         return;
       } else {
        res.redirect('/?error=no_group_id');
        return;
       }
    }
    
    if (isPopup) {
      // –î–ª—è popup –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å JavaScript
      const successHtml = generatePopupSuccessHTML(accessToken, groupId);
      res.send(successHtml);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
      req.session.user = user;
      res.redirect('/');
    }
  }
);

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
router.get('/senler/error', (req: Request, res: Response): void => {
  const errorDetails = req.query.error_description || req.query.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  res.redirect(`/?error=auth_failed&details=${encodeURIComponent(errorDetails as string)}`);
});

/**
 * –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Senler –≤ popup
 */
router.get('/senler/popup', (req: Request, res: Response, next: NextFunction): void => {
  const groupIdFromUrl = req.query.group_id as string;
  
  if (groupIdFromUrl) {
    // –°—Ç—Ä–æ–∏–º OAuth URL —Å group_id –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è popup
    const clientId = process.env.SENLER_CLIENT_ID;
    const redirectUri = encodeURIComponent(process.env.SENLER_CALLBACK_URL || `http://localhost:${process.env.PORT || 3000}/auth/senler/callback`);
    const state = generateRandomState();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ callback –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ popup
    (req as any).session.oauthState = state;
    (req as any).session.tempGroupId = groupIdFromUrl;
    (req as any).session.isPopup = true;
    
    const oauthUrl = `https://senler.ru/cabinet/OAuth2authorize?response_type=code&group_id=${groupIdFromUrl}&client_id=${clientId}&redirect_uri=${redirectUri}&state=${state}`;
    
    console.log(`üìå Popup —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ OAuth —Å group_id: ${groupIdFromUrl}`);
    res.redirect(oauthUrl);
    return;
  }
  
  // –û–±—ã—á–Ω—ã–π popup –±–µ–∑ group_id —á–µ—Ä–µ–∑ passport
  passport.authenticate('senler', {
    state: JSON.stringify({ popup: true })
  })(req, res, next);
});



/**
 * Endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (localStorage –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
 */
router.post('/validate-auth', (req: Request, res: Response): void => {
  const { accessToken, groupId } = req.body;
  
  if (!accessToken || !groupId) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ');
    res.status(400).json({ 
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ',
      details: { accessToken: !!accessToken, groupId: !!groupId }
    });
    return;
  }
  
  // –ü—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
  // –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ localStorage –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  res.json({ 
    success: true, 
    message: '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã',
    groupId: Number(groupId)
  });
});

/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
 */
router.post('/subscribers', async (req: Request, res: Response): Promise<void> => {
  const { accessToken, groupId } = req.body;
  
  if (!accessToken || !groupId) {
    res.status(400).json({ 
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ',
      details: { accessToken: !!accessToken, groupId: !!groupId }
    });
    return;
  }
  
  try {
    const user = { accessToken, groupId: Number(groupId) };
    const senlerService = createSenlerService(user);
    const stats = await senlerService.getSubscribersStats(30);
    
    res.json({
      success: true,
      data: stats
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error.message);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Senler API',
      message: error.message,
      details: error.response?.data || null
    });
  }
});



export default router; 