import { Request, Response, Router, NextFunction } from 'express';
import passport from 'passport';
import { SenlerChannel } from 'passport-senler';
import { generatePopupSuccessHTML, generatePopupErrorHTML } from '../utils/html';
import { createSenlerService } from '../services/senler';

const router = Router();

/**
 * –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Senler (–æ–±—ã—á–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç)
 */
router.get('/senler', (req: Request, res: Response, next: NextFunction): void => {
  const groupIdFromUrl = req.query.group_id as string;
  console.log('üîç /auth/senler - group_id –∏–∑ URL:', groupIdFromUrl);
  console.log('üîç /auth/senler - req.query:', req.query);
  
  // –ü–µ—Ä–µ–¥–∞–µ–º group_id —á–µ—Ä–µ–∑ –æ–ø—Ü–∏–∏ –¥–ª—è authorizationParams
  passport.authenticate('senler', {
    group_id: groupIdFromUrl
  } as any)(req, res, next);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è Senler (–æ–±—ã—á–Ω—ã–π –∏ popup)
 */
router.get(
  '/senler/callback',
  (req: Request, res: Response, next: NextFunction): void => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ callback
    if (req.query.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ callback:', req.query.error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ popup –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è
      const state = req.query.state as string;
      let isPopup = false;
      
      try {
        if (state) {
          const stateData = JSON.parse(state);
          isPopup = stateData.popup === true;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ state
      }
      
      if (isPopup) {
        // –î–ª—è popup –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –æ—à–∏–±–∫–æ–π
        const errorHtml = generatePopupErrorHTML(
          req.query.error as string,
          req.query.error_description as string
        );
        res.send(errorHtml);
        return;
      } else {
        // –î–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
        res.redirect(`/?error=senler_error&details=${encodeURIComponent(req.query.error as string)}&description=${encodeURIComponent(req.query.error_description as string || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`);
        return;
      }
    }
    
    next();
  },
  passport.authenticate('senler', {
    failureRedirect: '/auth/senler/error',
    session: false,
  }),
  (req: Request & { user?: any }, res: Response): void => {
    const user = req.user as SenlerChannel;
    const accessToken = user?.accessToken;
    let groupId = user?.groupId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ popup –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è
    const state = req.query.state as string;
    let isPopup = false;
    
    try {
      if (state) {
        const stateData = JSON.parse(state);
        isPopup = stateData.popup === true;
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ state
    }
    
    if (!accessToken) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      if (isPopup) {
        const errorHtml = generatePopupErrorHTML('no_token');
        res.send(errorHtml);
        return;
      } else {
        res.redirect('/?error=no_token');
        return;
      }
    }
    
    if (!groupId) {
      console.error('‚ùå Group ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      if (isPopup) {
        const errorHtml = generatePopupErrorHTML('no_group_id');
        res.send(errorHtml);
        return;
      } else {
        res.redirect('/?error=no_group_id');
        return;
      }
    }
    
    if (isPopup) {
      // –î–ª—è popup –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –¥–∞–Ω–Ω—ã–º–∏
      const successHtml = generatePopupSuccessHTML({
        accessToken,
        groupId,
      });
      res.send(successHtml);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      res.redirect('/');
    }
  }
);

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
router.get('/senler/error', (req: Request, res: Response): void => {
  const errorDetails = req.query.error_description || req.query.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  res.redirect(`/?error=auth_failed&details=${encodeURIComponent(errorDetails as string)}`);
});

/**
 * –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Senler –≤ popup
 */
router.get('/senler/popup', (req: Request, res: Response, next: NextFunction): void => {
  const groupIdFromUrl = req.query.group_id as string;
  console.log('üîç /auth/senler/popup - group_id –∏–∑ URL:', groupIdFromUrl);
  console.log('üîç /auth/senler/popup - req.query:', req.query);
  
  // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è popup –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ group_id —á–µ—Ä–µ–∑ –æ–ø—Ü–∏–∏
  const stateData = { popup: true };
  
  passport.authenticate('senler', {
    state: JSON.stringify(stateData),
    group_id: groupIdFromUrl
  } as any)(req, res, next);
});

/**
 * Endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (localStorage –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
 */
router.post('/validate-auth', (req: Request, res: Response): void => {
  const { accessToken, groupId } = req.body;
  
  if (!accessToken || !groupId) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ');
    res.status(400).json({ 
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ',
      details: { accessToken: !!accessToken, groupId: !!groupId }
    });
    return;
  }
  
  // –ü—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
  // –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ localStorage –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  res.json({ 
    success: true, 
    message: '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã',
    groupId: Number(groupId)
  });
});

/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
 */
router.post('/subscribers', async (req: Request, res: Response): Promise<void> => {
  const { accessToken, groupId } = req.body;
  
  if (!accessToken || !groupId) {
    res.status(400).json({ 
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ',
      details: { accessToken: !!accessToken, groupId: !!groupId }
    });
    return;
  }
  
  try {
    const user = { accessToken, groupId: Number(groupId) };
    const senlerService = createSenlerService(user);
    const stats = await senlerService.getSubscribersStats(30);
    
    res.json({
      success: true,
      data: stats
    });
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error.message);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Senler API',
      message: error.message,
      details: error.response?.data || null
    });
  }
});

export default router; 