#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ passport-senler –∏ senler-sdk
 */

import { execSync } from 'child_process';
import { existsSync } from 'fs';
import path from 'path';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function runCommand(command, description, workingDir = '.') {
  console.log(`${colors.blue}‚û§${colors.reset} ${description}`);
  console.log(`${colors.cyan}  ${command}${colors.reset}`);
  
  try {
    const result = execSync(command, { 
      cwd: workingDir, 
      stdio: 'inherit',
      encoding: 'utf8'
    });
    console.log(`${colors.green}‚úÖ –£—Å–ø–µ—à–Ω–æ: ${description}${colors.reset}\n`);
    return result;
  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞: ${description}${colors.reset}`);
    console.error(`${colors.red}   ${error.message}${colors.reset}\n`);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
function checkLibraryExists(libraryPath, libraryName) {
  if (!existsSync(libraryPath)) {
    console.error(`${colors.red}‚ùå –ü–∞–ø–∫–∞ ${libraryName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${libraryPath}${colors.reset}`);
    return false;
  }
  return true;
}

async function updateLibraries() {
  console.log(`${colors.bright}${colors.magenta}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫${colors.reset}`);
  console.log(`${colors.yellow}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${colors.reset}\n`);
  
  const currentDir = process.cwd();
  const passportSenlerPath = path.resolve('../passport-senler');
  const senlerSdkPath = path.resolve('../senler-sdk/senler-sdk');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
  const hasPassportSenler = checkLibraryExists(passportSenlerPath, 'passport-senler');
  const hasSenlerSdk = checkLibraryExists(senlerSdkPath, 'senler-sdk');
  
  if (!hasPassportSenler && !hasSenlerSdk) {
    console.error(`${colors.red}‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${colors.reset}`);
    process.exit(1);
  }
  
  try {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ passport-senler
    if (hasPassportSenler) {
      console.log(`${colors.bright}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ passport-senler${colors.reset}`);
      runCommand('npm install', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π passport-senler', passportSenlerPath);
      runCommand('npm run build', '–°–±–æ—Ä–∫–∞ passport-senler', passportSenlerPath);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ senler-sdk
    if (hasSenlerSdk) {
      console.log(`${colors.bright}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ senler-sdk${colors.reset}`);
      runCommand('npm install', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π senler-sdk', senlerSdkPath);
      runCommand('npm run build:clean', '–ß–∏—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ senler-sdk', senlerSdkPath);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log(`${colors.bright}üèóÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞${colors.reset}`);
    runCommand('npm install', '–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', currentDir);
    runCommand('npm run typecheck', '–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript —Ç–∏–ø–æ–≤', currentDir);
    runCommand('npm run build', '–°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', currentDir);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
    console.log(`${colors.bright}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π${colors.reset}`);
    console.log(`${colors.cyan}–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:${colors.reset}`);
    
    if (hasPassportSenler) {
      try {
        runCommand('npm ls passport-senler', '–í–µ—Ä—Å–∏—è passport-senler', currentDir);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ npm ls
      }
    }
    
    if (hasSenlerSdk) {
      try {
        runCommand('npm ls senler-sdk', '–í–µ—Ä—Å–∏—è senler-sdk', currentDir);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ npm ls
      }
    }
    
    console.log(`${colors.green}${colors.bright}üéâ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!${colors.reset}`);
    console.log(`${colors.yellow}üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å UPDATE_LOG.md${colors.reset}`);
    
  } catch (error) {
    console.error(`${colors.red}${colors.bright}üí• –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updateLibraries().catch(error => {
  console.error(`${colors.red}–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:${colors.reset}`, error);
  process.exit(1);
}); 